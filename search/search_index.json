{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Modern TinyPNG API for PHP7 PHP client for the TinyPNG API, Read more at official TinyPNG documentation . $ composer require robopuff/tinypng Basic usage $tinyPng = new \\TinyPng\\TinyPng(new \\TinyPng\\Client\\GuzzleClient('your_api_key')); $tinyPng ->optimize(new \\TinyPng\\Input\\Filesystem('unoptimized_image.png')) ->store(new \\TinyPng\\Output\\Storage\\Filesystem('optimized_image.png')); License This software is licensed under the BSD-3-Clause License. View the license .","title":"Home"},{"location":"#modern-tinypng-api-for-php7","text":"PHP client for the TinyPNG API, Read more at official TinyPNG documentation . $ composer require robopuff/tinypng","title":"Modern TinyPNG API for PHP7"},{"location":"#basic-usage","text":"$tinyPng = new \\TinyPng\\TinyPng(new \\TinyPng\\Client\\GuzzleClient('your_api_key')); $tinyPng ->optimize(new \\TinyPng\\Input\\Filesystem('unoptimized_image.png')) ->store(new \\TinyPng\\Output\\Storage\\Filesystem('optimized_image.png'));","title":"Basic usage"},{"location":"#license","text":"This software is licensed under the BSD-3-Clause License. View the license .","title":"License"},{"location":"usage/","text":"Usage Basic $tinyPng = new \\TinyPng\\TinyPng(new \\TinyPng\\Client\\GuzzleClient('your_api_key')); // Provide image path $output = $tinyPng->optimize(new \\TinyPng\\Input\\Filesystem('unoptimized_image.png')); // Provide image by url $output = $tinyPng->optimize(new \\TinyPng\\Input\\Guzzle('http://example.com/image.png')); // Save image $output->store(new \\TinyPng\\Output\\Storage\\Filesystem('output.file.png')); Define a client Currently, this library supports only Guzzle client, but you can specify options and client itself. For more information about Guzzle options, please read official Guzzle documentation // You can specify GuzzleHttp client manually (no options will be applied) // http://docs.guzzlephp.org/en/stable/request-options.html $client = new \\TinyPng\\Client\\GuzzleClient('api_key', ['guzzle' => 'options'], new \\GuzzleHttp\\Client()); Actions Resize image $tinyPng = new \\TinyPng\\TinyPng(new \\TinyPng\\Client\\GuzzleClient('your_api_key')); $output = $tinyPng->optimize(new \\TinyPng\\Input\\Filesystem('unoptimized_image.png')); $output->setCommands( new \\TinyPng\\Output\\Command\\Resize( \\TinyPng\\Output\\Command\\Resize::METHOD_FIT, 50 ) ); $output->store(new \\TinyPng\\Output\\Storage\\Filesystem('output.png')); Preserve metadata $tinyPng = new \\TinyPng\\TinyPng(new \\TinyPng\\Client\\GuzzleClient('your_api_key')); $output = $tinyPng->optimize(new \\TinyPng\\Input\\Filesystem('unoptimized_image.png')); $output->setCommands( new \\TinyPng\\Output\\Command\\Metadata( \\TinyPng\\Output\\Command\\Metadata::METADATA_COPYRIGHT, \\TinyPng\\Output\\Command\\Metadata::METADATA_CREATION, \\TinyPng\\Output\\Command\\Metadata::METADATA_LOCATION, ) ); $output->store(new \\TinyPng\\Output\\Storage\\Filesystem('output.png')); Save to Amazon S3 $tinyPng = new \\TinyPng\\TinyPng(new \\TinyPng\\Client\\GuzzleClient('your_api_key')); $output = $tinyPng->optimize(new \\TinyPng\\Input\\Filesystem('unoptimized_image.png')); $output->store(new \\TinyPng\\Output\\Storage\\AmazonS3([ 'aws_access_key_id' => '', 'aws_secret_access_key' => '', 'region' => '', 'path' => 'bucket/path/filename' ])); For more detailed explanation please refer to official documentation","title":"Usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#basic","text":"$tinyPng = new \\TinyPng\\TinyPng(new \\TinyPng\\Client\\GuzzleClient('your_api_key')); // Provide image path $output = $tinyPng->optimize(new \\TinyPng\\Input\\Filesystem('unoptimized_image.png')); // Provide image by url $output = $tinyPng->optimize(new \\TinyPng\\Input\\Guzzle('http://example.com/image.png')); // Save image $output->store(new \\TinyPng\\Output\\Storage\\Filesystem('output.file.png'));","title":"Basic"},{"location":"usage/#define-a-client","text":"Currently, this library supports only Guzzle client, but you can specify options and client itself. For more information about Guzzle options, please read official Guzzle documentation // You can specify GuzzleHttp client manually (no options will be applied) // http://docs.guzzlephp.org/en/stable/request-options.html $client = new \\TinyPng\\Client\\GuzzleClient('api_key', ['guzzle' => 'options'], new \\GuzzleHttp\\Client());","title":"Define a client"},{"location":"usage/#actions","text":"","title":"Actions"},{"location":"usage/#resize-image","text":"$tinyPng = new \\TinyPng\\TinyPng(new \\TinyPng\\Client\\GuzzleClient('your_api_key')); $output = $tinyPng->optimize(new \\TinyPng\\Input\\Filesystem('unoptimized_image.png')); $output->setCommands( new \\TinyPng\\Output\\Command\\Resize( \\TinyPng\\Output\\Command\\Resize::METHOD_FIT, 50 ) ); $output->store(new \\TinyPng\\Output\\Storage\\Filesystem('output.png'));","title":"Resize image"},{"location":"usage/#preserve-metadata","text":"$tinyPng = new \\TinyPng\\TinyPng(new \\TinyPng\\Client\\GuzzleClient('your_api_key')); $output = $tinyPng->optimize(new \\TinyPng\\Input\\Filesystem('unoptimized_image.png')); $output->setCommands( new \\TinyPng\\Output\\Command\\Metadata( \\TinyPng\\Output\\Command\\Metadata::METADATA_COPYRIGHT, \\TinyPng\\Output\\Command\\Metadata::METADATA_CREATION, \\TinyPng\\Output\\Command\\Metadata::METADATA_LOCATION, ) ); $output->store(new \\TinyPng\\Output\\Storage\\Filesystem('output.png'));","title":"Preserve metadata"},{"location":"usage/#save-to-amazon-s3","text":"$tinyPng = new \\TinyPng\\TinyPng(new \\TinyPng\\Client\\GuzzleClient('your_api_key')); $output = $tinyPng->optimize(new \\TinyPng\\Input\\Filesystem('unoptimized_image.png')); $output->store(new \\TinyPng\\Output\\Storage\\AmazonS3([ 'aws_access_key_id' => '', 'aws_secret_access_key' => '', 'region' => '', 'path' => 'bucket/path/filename' ])); For more detailed explanation please refer to official documentation","title":"Save to Amazon S3"}]}